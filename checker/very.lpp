%{
	#include<string>
	#include<iostream>
	#include<fstream>
	#include<stack>
	#include<assert.h>
	#include<regex>
	#include<vector>
	#include<list>
	#include<memory>
	#include"variant_exp.h"

# ifndef YY_NULLPTR
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULLPTR nullptr
#  else
#   define YY_NULLPTR 0
#  endif
# endif
	#include"asthelpper.h"
  #include"verilogast.h"
  #include"verilog_parser.h"
	#include"veryscanner.h"

	using namespace std;
	void prt_fatal(string str)  { cerr<<"FATAL : "<<str<<endl<<flush; return; }
	void prt_info (string str)  { cerr<<"INOF  : "<<str<<endl<<flush; return; }
	
	string stringssy_string;
	unsigned int ln;

	void deleteblank(string & s) {
		while(s[0]==' '|| s[0]=='\t')  {s.erase(0,1);}
		while(s[0]==' '|| s[0]=='\t')  {s.pop_back();}
	}
	bool isDECchar (char c ) {
		if ('0' <= c && c <= '9') return true;
		else return false;
	}
	bool isOCTchar (char c ) {
		if ('0' <= c && c <= '7') return true;
		else if('x'==c || 'X'==c) return true;
		else if('z'==c || 'Z'==c) return true;
		else return false;
	}
	bool isBINchar (char c ) {
		if ('0' <= c && c <= '1') return true;
		else if('x'==c || 'X'==c) return true;
		else if('z'==c || 'Z'==c) return true;
		else return false;
	}
	bool isHEXchar (char c ) {
		if ('0' <= c && c <= '9') return true;
		else if ('a' <= c && c <= 'f') return true;
		else if ('A' <= c && c <= 'F') return true;
		else if('x'==c || 'X'==c) return true;
		else if('z'==c || 'Z'==c) return true;
		else return false;
	}

	// The location of the current token.
	 #define YY_USER_ACTION loc.step (); loc.columns(yyleng);
	#undef YY_DECL
	#define YY_DECL yy::verilog_parser::symbol_type veryScanner::yylex1() 
%}

%option noyywrap
%option yylineno
%option nounput batch debug noinput
 /*these are command line transfer to here*/
%option outfile="very.cpp"
%option warn
%option c++
%option prefix="very"
%option yyclass="veryScanner"
%option header-file="very.h"


  /*A.8.7 Numbers */
x_digit       [xX]
z_digit       [zZ\?]
binary_digit  {x_digit}|{z_digit}|[01]
octal_digit   {x_digit}|{z_digit}|[0-7]
decimal_digit [0-9]
hex_digit     {x_digit}|{z_digit}|[0-9A-Fa-f]
non_zero_decimal_digit  [1-9]
decimal_base  (\'[sS]?d)|(\'[sS]?D)
binary_base   (\'[sS]?b)|(\'[sS]?B)
octal_base    (\'[sS]?o)|(\'[sS]?O)
hex_base      (\'[sS]?h)|(\'[sS]?H)
binary_value  {binary_digit}(_|{binary_digit})*
octal_value   {octal_digit}(_|{octal_digit})*
hex_value     {hex_digit}(_|{hex_digit})*
unsigned_number  {decimal_digit}(_|{decimal_digit})*
non_zero_unsigned_number  {non_zero_decimal_digit}(_|{decimal_digit})*
size          {non_zero_unsigned_number}
sign          [+-]
exp           [eE]
real_number     ({unsigned_number}\.{unsigned_number})|({unsigned_number}(\.{unsigned_number})?{exp}{sign}?{unsigned_number})
time_precision "s"|"ms"|"us"|"ns"|"ps"|"fs"

  /*A.8.8 Strings*/
  /*already deal with below*/

  /*A.9.2 Comments*/
  /*already deal with below*/


  /*A.9.3 Identifiers*/
escaped_identifier     \\[^ \t\n]+[ ]
system_task_function_identifier [\$][a-zA-Z0-9_\$]+
simple_identifier  [a-zA-Z_][a-zA-Z0-9_\$]*
  /*A.9.4 White space*/
  /*white space only used in escaped_identifier*/

useless_directives "`default_decay_time"|"`default_trireg_strength"|"`delay_mode_distributed"|"`delay_mode_path"|"`delay_mode_unit"|"`delay_mode_zero"|"`accelerate"|"`autoexpand_vectornets"|"`begin_keywords"|"`celldefine"|"`default_nettype"|"`endcelldefine"|"`end_keywords"|"`endprotect"|"`endprotected"|"`expand_vectornets"|"`include"|"`noaccelerate"|"`noexpand_vectornets"|"`noremove_gatenames"|"`noremove_netnames"|"`nounconnected_drive"|"`pragma"|"`protect"|"`protected"|"`remove_gatenames"|"`remove_netnames"|"`resetall"|"`timescale"|"`unconnected_drive"

harful_directives "`define"|"`else"|"`elsif"|"`endif"|"`ifdef"|"`ifndef"|"`resetall"|"`undef"

blank [ \t]
digit [0-9]

%x line_skip_blank line_number line_skip_blank2 line_filename endofline stringssy

%%

%{
  // Code run each time yylex is called.
	//this is not precise, I use YY_USER_ACTION above instead
%}

{blank}+ 

{system_task_function_identifier} {
	string s(yytext);
	return yy::verilog_parser::make_SYSTEM_TASK_FUNCTION_IDENTIFIER(s,loc);
}

{escaped_identifier} {
	string s{yytext};
	return yy::verilog_parser::make_ESCAPED_IDENTIFIER(s,loc);
}

"always"						 { yy::verilog_parser::make_KEY_ALWAYS(loc);}
"and"								 { yy::verilog_parser::make_KEY_AND(loc);}
"assign"             { yy::verilog_parser::make_KEY_ASSIGN(loc);}
"automatic"          { yy::verilog_parser::make_KEY_AUTOMATIC(loc);}
"begin"              { yy::verilog_parser::make_KEY_BEGIN(loc);}
"buf"                { yy::verilog_parser::make_KEY_BUF(loc);}
"bufif0"             { yy::verilog_parser::make_KEY_BUFIF0(loc);}
"bufif1"             { yy::verilog_parser::make_KEY_BUFIF1(loc);}
"case"               { yy::verilog_parser::make_KEY_CASE(loc);}
"casex"              { yy::verilog_parser::make_KEY_CASEX(loc);}
"casez"              { yy::verilog_parser::make_KEY_CASEZ(loc);}
"cell"               { yy::verilog_parser::make_KEY_CELL(loc);}
"cmos"               { yy::verilog_parser::make_KEY_CMOS(loc);}
"config"             { yy::verilog_parser::make_KEY_CONFIG(loc);}
"deassign"           { yy::verilog_parser::make_KEY_DEASSIGN(loc);}
"default"            { yy::verilog_parser::make_KEY_DEFAULT(loc);}
"defparam"           { yy::verilog_parser::make_KEY_DEFPARAM(loc);}
"design"             { yy::verilog_parser::make_KEY_DESIGN(loc);}
"disable"            { yy::verilog_parser::make_KEY_DISABLE(loc);}
"edge"							 { yy::verilog_parser::make_KEY_EDGE(loc);}
"else"               { yy::verilog_parser::make_KEY_ELSE(loc);}
"end"                { yy::verilog_parser::make_KEY_END(loc);}
"endcase"            { yy::verilog_parser::make_KEY_ENDCASE(loc);}
"endconfig"          { yy::verilog_parser::make_KEY_ENDCONFIG(loc);}
"endfunction"        { yy::verilog_parser::make_KEY_ENDFUNCTION(loc);}
"endgenerate"        { yy::verilog_parser::make_KEY_ENDGENERATE(loc);}
"endmodule"          { yy::verilog_parser::make_KEY_ENDMODULE(loc);}
"endprimitive"       { yy::verilog_parser::make_KEY_ENDPRIMITIVE(loc);}
"endspecify"         { yy::verilog_parser::make_KEY_ENDSPECIFY(loc);}
"endtable"           { yy::verilog_parser::make_KEY_ENDTABLE(loc);}
"endtask"            { yy::verilog_parser::make_KEY_ENDTASK(loc);}
"event"              { yy::verilog_parser::make_KEY_EVENT(loc);}
"for"                { yy::verilog_parser::make_KEY_FOR(loc);}
"force"              { yy::verilog_parser::make_KEY_FORCE(loc);}
"forever"            { yy::verilog_parser::make_KEY_FOREVER(loc);}
"fork"               { yy::verilog_parser::make_KEY_FORK(loc);}
"function"           { yy::verilog_parser::make_KEY_FUNCTION(loc);}
"generate"           { yy::verilog_parser::make_KEY_GENERATE(loc);}
"genvar"						 { yy::verilog_parser::make_KEY_GENVAR(loc);}
"highz0"             { yy::verilog_parser::make_KEY_HIGHZ0(loc);}
"highz1"             { yy::verilog_parser::make_KEY_HIGHZ1(loc);}
"if"                 { yy::verilog_parser::make_KEY_IF(loc);}
"ifnone"             { yy::verilog_parser::make_KEY_IFNONE(loc);}
"incdir"             { yy::verilog_parser::make_KEY_INCDIR(loc);}
"include"            { yy::verilog_parser::make_KEY_INCLUDE(loc);}
"initial"            { yy::verilog_parser::make_KEY_INITIAL(loc);}
"inout"              { yy::verilog_parser::make_KEY_INOUT(loc);}
"input"              { yy::verilog_parser::make_KEY_INPUT(loc);}
"instance"           { yy::verilog_parser::make_KEY_INSTANCE(loc);}
"integer"            { yy::verilog_parser::make_KEY_INTEGER(loc);}
"join"               { yy::verilog_parser::make_KEY_JOIN(loc);}
"large"              { yy::verilog_parser::make_KEY_LARGE(loc);}
"liblist"            { yy::verilog_parser::make_KEY_LIBLIST(loc);}
"library"            { yy::verilog_parser::make_KEY_LIBRARY(loc);}
"localparam"         { yy::verilog_parser::make_KEY_LOCALPARAM(loc);}
"macromodule"        { yy::verilog_parser::make_KEY_MACROMODULE(loc);}
"medium"             { yy::verilog_parser::make_KEY_MEDIUM(loc);}
"module"						 { yy::verilog_parser::make_KEY_MODULE(loc);}
"nand"               { yy::verilog_parser::make_KEY_NAND(loc);}
"negedge"            { yy::verilog_parser::make_KEY_NEGEDGE(loc);}
"nmos"               { yy::verilog_parser::make_KEY_NMOS(loc);}
"nor"                { yy::verilog_parser::make_KEY_NOR(loc);}
"noshowcancelled"    { yy::verilog_parser::make_KEY_NOSHOWCANCELLED(loc);}
"not"                { yy::verilog_parser::make_KEY_NOT(loc);}
"notif0"             { yy::verilog_parser::make_KEY_NOTIF0(loc);}
"notif1"             { yy::verilog_parser::make_KEY_NOTIF1(loc);}
"or"                 { yy::verilog_parser::make_KEY_OR(loc);}
"output"             { yy::verilog_parser::make_KEY_OUTPUT(loc);}
"parameter"          { yy::verilog_parser::make_KEY_PARAMETER(loc);}
"pmos"               { yy::verilog_parser::make_KEY_PMOS(loc);}
"posedge"            { yy::verilog_parser::make_KEY_POSEDGE(loc);}
"primitive"          { yy::verilog_parser::make_KEY_PRIMITIVE(loc);}
"pull0"              { yy::verilog_parser::make_KEY_PULL0(loc);}
"pull1"              { yy::verilog_parser::make_KEY_PULL1(loc);}
"pulldown"           { yy::verilog_parser::make_KEY_PULLDOWN(loc);}
"pullup"             { yy::verilog_parser::make_KEY_PULLUP(loc);}
"pulsestyle_onevent"	{ yy::verilog_parser::make_KEY_PULSESTYLE_ONEVENT(loc);}
"pulsestyle_ondetect" { yy::verilog_parser::make_KEY_PULSESTYLE_ONDETECT(loc);}
"rcmos"              { yy::verilog_parser::make_KEY_RCMOS(loc);}
"real"               { yy::verilog_parser::make_KEY_REAL(loc);}
"realtime"           { yy::verilog_parser::make_KEY_REALTIME(loc);}
"reg"                { yy::verilog_parser::make_KEY_REG(loc);}
"release"            { yy::verilog_parser::make_KEY_RELEASE(loc);}
"repeat"             { yy::verilog_parser::make_KEY_REPEAT(loc);}
"rnmos"              { yy::verilog_parser::make_KEY_RNMOS(loc);}
"rpmos"              { yy::verilog_parser::make_KEY_RPMOS(loc);}
"rtran"              { yy::verilog_parser::make_KEY_RTRAN(loc);}
"rtranif0"           { yy::verilog_parser::make_KEY_RTRANIF0(loc);}
"rtranif1"           { yy::verilog_parser::make_KEY_RTRANIF1(loc);}
"scalared"           { yy::verilog_parser::make_KEY_SCALARED(loc);}
"showcancelled"      { yy::verilog_parser::make_KEY_SHOWCANCELLED(loc);}
"signed"             { yy::verilog_parser::make_KEY_SIGNED(loc);}
"small"              { yy::verilog_parser::make_KEY_SMALL(loc);}
"specify"            { yy::verilog_parser::make_KEY_SPECIFY(loc);}
"specparam"          { yy::verilog_parser::make_KEY_SPECPARAM(loc);}
"strong0"						{ yy::verilog_parser::make_KEY_STRONG0(loc);}
"strong1"            { yy::verilog_parser::make_KEY_STRONG1(loc);}
"supply0"            { yy::verilog_parser::make_KEY_SUPPLY0(loc);}
"supply1"            { yy::verilog_parser::make_KEY_SUPPLY1(loc);}
"table"              { yy::verilog_parser::make_KEY_TABLE(loc);}
"task"               { yy::verilog_parser::make_KEY_TASK(loc);}
"time"               { yy::verilog_parser::make_KEY_TIME(loc);}
"tran"               { yy::verilog_parser::make_KEY_TRAN(loc);}
"tranif0"            { yy::verilog_parser::make_KEY_TRANIF0(loc);}
"tranif1"            { yy::verilog_parser::make_KEY_TRANIF1(loc);}
"tri"                { yy::verilog_parser::make_KEY_TRI(loc);}
"tri0"               { yy::verilog_parser::make_KEY_TRI0(loc);}
"tri1"               { yy::verilog_parser::make_KEY_TRI1(loc);}
"triand"             { yy::verilog_parser::make_KEY_TRIAND(loc);}
"trior"              { yy::verilog_parser::make_KEY_TRIOR(loc);}
"trireg"             { yy::verilog_parser::make_KEY_TRIREG(loc);}
"unsigned"           { yy::verilog_parser::make_KEY_UNSIGNED(loc);}
"use"                { yy::verilog_parser::make_KEY_USE(loc);}
"uwire"              { yy::verilog_parser::make_KEY_UWIRE(loc);}
"vectored"						{ yy::verilog_parser::make_KEY_VECTORED(loc);}
"wait"               { yy::verilog_parser::make_KEY_WAIT(loc);}
"wand"               { yy::verilog_parser::make_KEY_WAND(loc);}
"weak0"              { yy::verilog_parser::make_KEY_WEAK0(loc);}
"weak1"              { yy::verilog_parser::make_KEY_WEAK1(loc);}
"while"              { yy::verilog_parser::make_KEY_WHILE(loc);}
"wire"               { yy::verilog_parser::make_KEY_WIRE(loc);}
"wor"                { yy::verilog_parser::make_KEY_WOR(loc);}
"xnor"               { yy::verilog_parser::make_KEY_XNOR(loc);}
"xor"                { yy::verilog_parser::make_KEY_XOR(loc);}
{simple_identifier}	 { 
	string s{yytext};
	yy::verilog_parser::make_SIMPLE_IDENTIFIER(s,loc);
}

"PATHPULSE\$"				 {yy::verilog_parser::make_KEY_PATHPULSE(loc);}

{unsigned_number} {
	unsigned int lxm_no_;
	sscanf(yytext,"%d",&lxm_no_);
	return yy::verilog_parser::make_UNSIGNED_NUMBER(lxm_no_,loc);
}

<<EOF>>    return yy::verilog_parser::make_END(loc);


{size}?{decimal_base}{blank}*{unsigned_number} {
	string s{yytext};
	int dbpos=s.find_first_of('\'');
	string szstr=s.substr(0,dbpos);
	deleteblank(szstr);
	unsigned int sz;
	if(s.size()==0) {
		sz=32;
	} else {
		sz=stoul(szstr);
	}

	int numpos=dbpos;
	while(isDECchar(s[numpos])==false) { numpos++; }
	string numstr =s.substr(numpos,(s.size()-1-numpos+1));
	deleteblank(numstr);
	unsigned int num =stoul(numstr);

	return yy::verilog_parser::make_UNSIGNED_NUMBER_size(std::make_tuple(sz,num),loc);
}


{size}?{decimal_base}{blank}*{x_digit}[_]* {
	assert(false);
}

{size}?{decimal_base}{blank}*{z_digit}[_]* {
	assert(false);
}

{size}?{octal_base}{blank}*{octal_value} {
	string s{yytext};
	int dbpos=s.find_first_of('\'');
	string szstr=s.substr(0,dbpos);
	deleteblank(szstr);
	unsigned int sz;
	if(s.size()==0) {
		sz=32;
	} else {
		sz=stoul(szstr);
	}

	int numpos=dbpos;
	while(isOCTchar(s[numpos])==false) { numpos++; }
	string numstr =s.substr(numpos,(s.size()-1-numpos+1));
	deleteblank(numstr);

	return yy::verilog_parser::make_OCTAL_NUMBER(std::make_tuple(sz,numstr),loc);
}

{size}?{binary_base}{blank}*{binary_value} {
	string s{yytext};
	int dbpos=s.find_first_of('\'');
	string szstr=s.substr(0,dbpos);
	deleteblank(szstr);
	unsigned int sz;
	if(s.size()==0) {
		sz=32;
	} else {
		sz=stoul(szstr);
	}

	int numpos=dbpos;
	while(isBINchar(s[numpos])==false) { numpos++; }
	string numstr =s.substr(numpos,(s.size()-1-numpos+1));
	deleteblank(numstr);

	return yy::verilog_parser::make_BINARY_NUMBER(std::make_tuple(sz,numstr),loc);
}


{size}?{hex_base}{blank}*{hex_value} {
	string s{yytext};
	int dbpos=s.find_first_of('\'');
	string szstr=s.substr(0,dbpos);
	deleteblank(szstr);
	unsigned int sz;
	if(s.size()==0) {
		sz=32;
	} else {
		sz=stoul(szstr);
	}

	int numpos=dbpos;
	while(isHEXchar(s[numpos])==false) { numpos++; }
	string numstr =s.substr(numpos,(s.size()-1-numpos+1));
	deleteblank(numstr);

	return yy::verilog_parser::make_HEX_NUMBER(std::make_tuple(sz,numstr),loc);
}


{real_number} {
	string s(yytext);
	return yy::verilog_parser::make_REAL_NUMBER(s,loc);
}


"+"		{return yy::verilog_parser::make_OP2_ADD(loc);}
"-"		{return yy::verilog_parser::make_OP2_SUB(loc);}
"&"		{return yy::verilog_parser::make_OP2_AND(loc);}
"|"		{return yy::verilog_parser::make_OP2_OR (loc);}
"^"		{return yy::verilog_parser::make_OP2_XOR(loc);}
"~^"|"^~"		{return yy::verilog_parser::make_OP2_XNOR(loc);}
"!"		{return yy::verilog_parser::make_OP1_LOGIC_NEG(loc);}
"~"		{return yy::verilog_parser::make_OP1_BITWISE_NEG(loc);}
"~&"	{return yy::verilog_parser::make_OP1_REDUCE_NAND(loc);}
"~|"	{return yy::verilog_parser::make_OP1_REDUCE_NOR(loc);}
"*"		{return yy::verilog_parser::make_OP2_MULTIPLE(loc);}
"/"		{return yy::verilog_parser::make_OP2_DIV(loc);}
"%"		{return yy::verilog_parser::make_OP2_MOD(loc);}
"=="	{return yy::verilog_parser::make_OP2_EQU2(loc);}
"!="	{return yy::verilog_parser::make_OP2_NEQ2(loc);}
"==="	{return yy::verilog_parser::make_OP2_EQU3(loc);}
"!=="	{return yy::verilog_parser::make_OP2_NEQ3(loc);}
"&&"	{return yy::verilog_parser::make_OP2_AND2(loc);}
"||"	{return yy::verilog_parser::make_OP2_OR2(loc);}
"**"	{return yy::verilog_parser::make_OP2_POWER(loc);}
"<"		{return yy::verilog_parser::make_OP2_LT(loc);}
"<="	{return yy::verilog_parser::make_OP2_LE(loc);}
">"		{return yy::verilog_parser::make_OP2_GT(loc);}
">="	{return yy::verilog_parser::make_OP2_GE(loc);}
">>"	{return yy::verilog_parser::make_OP2_LOGICAL_RIGHTSHIFT(loc);}
"<<"	{return yy::verilog_parser::make_OP2_LOGICAL_LEFTSHIFT(loc);}
">>>"	{return yy::verilog_parser::make_OP2_ARITHMETIC_RIGHTSHIFT(loc);}
"<<<"	{return yy::verilog_parser::make_OP2_ARITHMETIC_LEFTSHIFT(loc);}
"?"		{return yy::verilog_parser::make_OP2_QUESTION(loc);}
"("		{return yy::verilog_parser::make_LPARENT(loc);}
"(*"		{return yy::verilog_parser::make_LPARENTSTART(loc);}
")"		{return yy::verilog_parser::make_RPARENT(loc);}
"*)"		{return yy::verilog_parser::make_RPARENTSTART(loc);}
","		{return yy::verilog_parser::make_COMMA(loc);}
";"		{return yy::verilog_parser::make_SEMICOLON(loc);}
":"		{return yy::verilog_parser::make_COLON(loc);}
"["		{return yy::verilog_parser::make_LSQUARE(loc);}
"]"		{return yy::verilog_parser::make_RSQUARE(loc);}
"="		{return yy::verilog_parser::make_EQU1(loc);}
"{"		{return yy::verilog_parser::make_LBRACE(loc);}
"}"		{return yy::verilog_parser::make_RBRACE(loc);}
"."		{return yy::verilog_parser::make_PERIOD(loc);}
"@"		{return yy::verilog_parser::make_AT(loc);}
"#"		{return yy::verilog_parser::make_JING(loc);}
"+:"	{return yy::verilog_parser::make_ADDRANGE(loc);}
"-:"	{return yy::verilog_parser::make_SUBRANGE(loc);}
"$"		{return yy::verilog_parser::make_DOLLOR(loc);}
"->"	{return yy::verilog_parser::make_IMPLY(loc);}
"=>"	{return yy::verilog_parser::make_IMPLY2(loc);}
"*>"	{return yy::verilog_parser::make_IMPLYSTART(loc);}

\r

\n {
	loc.lines (1);
	loc.step ();
}


\"		{ 
	stringssy_string="";
	yy_push_state(stringssy);
}


   /*2005 standard directive*/
"`default_decay_time"{blank}+{unsigned_number} |
"`default_decay_time"{blank}+{real_number} |
"`default_decay_time"{blank}+"infinite" |
"`default_trireg_strength"{blank}+{unsigned_number} |
"`delay_mode_distributed" |
"`delay_mode_path" |
"`delay_mode_unit" |
"`delay_mode_zero" |
"`begin_keywords"{blank}+"1364-1995" |
"`begin_keywords"{blank}+"1364-2001-noconfig" |
"`begin_keywords"{blank}+"1364-2001" |
"`begin_keywords"{blank}+"1364-2005" |
"`end_keywords" |
"`celldefine" |
"`endcelldefine" |
"`default_nettype"{blank}+"wire" |
"`default_nettype"{blank}+"tri0" |
"`default_nettype"{blank}+"tri1" |
"`default_nettype"{blank}+"wand" |
"`default_nettype"{blank}+"triand" |
"`default_nettype"{blank}+"wor" |
"`default_nettype"{blank}+"trior" |
"`default_nettype"{blank}+"trireg" |
"`default_nettype"{blank}+"uwire" |
"`default_nettype"{blank}+"none" |
"`default_nettype"{blank}+"tri" |
"`nounconnected_drive" |
"`pragma"[^\n]* |
"`resetall" |
"`timescale"{blank}+{unsigned_number}{blank}*{time_precision}{blank}*"/"{blank}*{unsigned_number}{blank}*{time_precision} |
"`unconnected_drive"{blank}+"pull1" |
"`unconnected_drive"{blank}+"pull0" {
	string s{yytext};
	prt_info("ignoring directive "+s);
}

"`accelerate" |
"`noaccelerate" |
"`autoexpand_vectornets" |
"`endprotect" |
"`endprotected" |
"`expand_vectornets" |
"`noexpand_vectornets" |
"`noremove_gatenames" |
"`noremove_netnames" |
"`protect" |
"`protected" |
"`remove_gatenames" |
"`remove_netnames" {
	string s{yytext};
	prt_info("deprecated directive "+s);
}

"`line"			{
	ECHO;
	yy_push_state(line_skip_blank);
}

. {
	string s{yytext};
	prt_fatal("improper syntax "+s);
	print_pos();
	exit(1);
}


<line_skip_blank>{
	{blank}+ {
		ECHO;
		yy_pop_state();
		yy_push_state(line_number);
	}
	. {
		string s{yytext};
		prt_fatal("improper `line statement"+s);
		print_pos();
		exit(1);
	}
}

<line_number>{
	{digit}+ {
		sscanf(yytext,"%d",&ln);
		ECHO;
		yy_pop_state();
		yy_push_state(line_skip_blank2);
	}

	. {
		string s{yytext};
		prt_fatal("improper `line number"+s);
		print_pos();
		exit(1);
	}
}

<line_skip_blank2>{
	{blank}+ {
		ECHO;
		yy_pop_state();
		yy_push_state(line_filename);
	}
	. {
		string s{yytext};
		prt_fatal("improper `line file name"+s);
		print_pos();
		exit(1);
	}
}

<line_filename>{
	[^\n\t ]+ {
		string s{yytext};
		loc.initialize(&s,ln-1,1);
		ECHO;
		yy_pop_state();
		yy_push_state(endofline);
	}

	. {
		string s{yytext};
		prt_fatal("improper `line file name 2"+s);
		print_pos();
		exit(1);
	}
}


<endofline>{
	[^\n]*\n {
		ECHO;
		yy_pop_state();
	}
}

<stringssy>{
	\n {
		prt_fatal("incomplet string"+stringssy_string);
		print_pos();
		exit(1);
	}
	"\\\"" {
		string s{yytext};
		stringssy_string = stringssy_string+s;
	}
	\" {
		yy_pop_state();
		return yy::verilog_parser::make_STRING(stringssy_string,loc);
	} 
	. {
		string s{yytext};
		stringssy_string = stringssy_string+s;
	}
}
%%




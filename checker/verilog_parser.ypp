%skeleton "lalr1.cc" /* -*- C++ -*- */
 /*%require "3.0.4"*/
 /*as of writing this, I am using 3.0.2*/
/*creating .h file*/
%defines "verilog_parser.h"
%define parser_class_name {verilog_parser}

%define api.token.constructor
%define api.value.type variant
%define parse.assert

%code requires
{
#include <string>
class verilog_driver;
}

 /* The parsing context. for yylex*/
%param { verilog_driver& driver }

%locations
%initial-action
{
	/* Initialize the initial location.*/
	@$.begin.filename = @$.end.filename = &driver.file;
};

%define parse.trace
%define parse.error verbose

%code
{
# include "verilog_driver.h"
}

 /*%define api.token.prefix {TOK_}*/
 /*we dont need this*/
%token
END  0  "end of file"
PLUS    "+"
;

%token <int> UNSIGNED_NUMBER 
%type  <int> exp

%printer { yyoutput << $$; } <*>;


%%

%start st;
st:  exp  { driver.result = $1; };

%left "+";
exp:
exp "+" exp   { $$ = $1 + $3; }
| UNSIGNED_NUMBER      { std::swap ($$, $1); };

%%

void yy::verilog_parser::error (const location_type& l, const std::string& m) {
	driver.error (l, m);
}

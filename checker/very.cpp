#line 2 "very.cpp"

#line 4 "very.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer veryFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *veryalloc (yy_size_t  );
void *veryrealloc (void *,yy_size_t  );
void veryfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int veryScanner::yylex()

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 245
#define YY_END_OF_BUFFER 246
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1084] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  246,  231,    1,  183,  182,  142,
      184,  179,  231,  148,  138,  231,  165,  167,  146,  136,
      169,  137,  177,  147,  128,  128,  171,  170,  156,  174,
      158,  164,  178,  127,  172,  173,  140,  231,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      175,  139,  176,  143,  233,  232,  245,  235,  234,  237,
      236,  238,  239,  245,  240,  244,  241,  243,  244,    1,
      150,    2,  153,    0,    0,    0,    0,    0,  166,  168,

      155,  180,  181,    0,  128,    0,    0,  128,  161,  157,
      149,  159,  160,  127,  141,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,   44,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,   69,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  154,  144,  145,  232,  234,  236,  238,    0,

      240,  242,  152,    0,  133,    0,  129,  131,  130,    0,
      134,    0,  132,  135,    0,  135,  163,  151,  162,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  127,    4,  127,  127,  127,    8,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,   24,  127,
       35,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,   64,  127,   66,  127,  127,  127,  127,  127,  127,
      127,  127,   84,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  108,

      127,  115,  127,  127,  127,  127,  127,  127,  127,  124,
      127,  126,  133,  129,  131,  130,  134,  132,  135,  135,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  127,
      127,  127,  127,  127,   11,   14,   15,  127,  127,  127,
      127,  127,  127,   22,   23,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,   38,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,   53,  127,
      127,  127,  127,  127,  127,  127,   61,  127,   63,  127,
      127,  127,  127,   72,  127,  127,  127,  127,  127,   82,

      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  103,  104,  105,  109,  110,  127,  127,
      127,  127,  127,  127,  118,  119,  127,  127,  123,  125,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      230,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  127,  127,  127,    7,  127,   12,   13,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,   34,   36,  127,  127,  127,  127,  127,  127,
      127,  127,  127,   49,   50,  127,  127,   54,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,

      127,   75,   76,  127,  127,  127,   81,  127,  127,  127,
       87,   88,   89,  127,  127,  127,   95,  127,  127,  127,
      127,  102,  127,  127,  112,  127,  127,  116,  127,  120,
      121,  122,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    3,    5,  127,    9,   10,   16,  127,  127,
      127,   20,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,   41,   42,   43,   45,   46,
      127,  127,  127,  127,  127,  127,  127,  127,   59,   60,
      127,  127,   67,   68,   70,  127,  127,  127,  127,   78,

      127,  127,  127,   86,  127,  127,  127,   94,  127,  127,
      127,  127,  127,  111,  113,  127,  127,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  212,    0,    0,    0,    0,    0,  127,  127,   18,
      127,   21,   25,  127,  127,  127,  127,  127,  127,  127,
       33,   37,  127,  127,   47,   48,  127,   52,   55,   56,
      127,  127,   62,  127,  127,   73,  127,  127,  127,  127,
       85,  127,  127,  127,   96,  127,   98,   99,  100,  101,
      106,  107,  127,  127,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  212,  226,

        0,    0,    0,    0,  127,   17,   19,  127,  127,  127,
      127,  127,  127,   32,   39,   40,   51,  127,  127,  127,
      127,  127,   77,  127,   83,   90,   91,   92,  127,  127,
      114,  117,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  213,
        0,    0,    6,   26,  127,  127,   29,  127,  127,  127,
      127,  127,   71,   74,  127,  127,   97,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  227,    0,    0,    0,    0,  127,  127,
      127,   31,   57,  127,  127,  127,  127,  217,    0,    0,

      198,    0,    0,    0,    0,    0,    0,  220,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   27,   28,
      127,   58,  127,  127,  127,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   30,  127,  127,  127,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  197,    0,  221,
        0,  218,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  127,  127,   93,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  199,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      127,  127,  127,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   65,  127,  127,    0,    0,    0,    0,    0,
        0,  190,  191,  192,    0,    0,    0,    0,    0,    0,
      229,    0,    0,    0,    0,    0,    0,  214,    0,    0,
      127,  127,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  228,    0,  127,  127,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  222,    0,    0,  225,
        0,    0,  127,   79,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  224,    0,    0,   80,

        0,    0,    0,    0,  210,    0,    0,    0,  205,    0,
        0,  223,  211,    0,    0,    0,  185,    0,  209,  201,
      202,    0,    0,    0,    0,  203,  200,    0,    0,    0,
      219,    0,    0,    0,  185,    0,    0,    0,  206,    0,
      208,    0,    0,    0,    0,    0,  186,    0,  186,    0,
      204,  207,    0,  189,    0,    0,    0,  186,  186,    0,
        0,  216,  215,  193,  195,  196,    0,    0,    0,    0,
      188,    0,    0,  188,    0,  187,    0,    0,    0,    0,
        0,  194,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   37,   39,   40,   37,
       41,   42,   41,   41,   41,   41,   41,   41,   43,   41,
       41,   41,   44,   41,   41,   41,   41,   45,   41,   46,
       47,   48,   49,   50,   51,   52,   53,   54,   55,   56,

       57,   58,   59,   60,   61,   62,   63,   64,   65,   66,
       67,   68,   41,   69,   70,   71,   72,   73,   74,   75,
       76,   77,   78,   79,   80,   81,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[82] =
    {   0,
        1,    2,    3,    1,    1,    1,    1,    4,    1,    1,
        5,    1,    1,    1,    1,    1,    1,    6,    1,    7,
        7,    7,    7,    7,    7,    7,    7,    8,    8,    1,
        1,    1,    1,    1,    9,    1,   10,   10,   10,   11,
        4,    4,    4,    4,   12,   12,    1,    1,    1,    1,
       13,    1,   10,   10,   10,   10,   11,   10,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,   12,    4,   12,    1,    1,    1,
        1
    } ;

static yyconst flex_int16_t yy_base[1105] =
    {   0,
        0,    0,   80,   82,   83,   93,   85,   87,   89,   91,
     1631, 1630,   92,   94, 1632, 1635, 1629, 1635, 1635, 1597,
     1635, 1635,    0, 1635, 1619,   85, 1614, 1635,   88, 1597,
     1635, 1596, 1635, 1635,  107,  119, 1635, 1635,   99, 1592,
      100, 1635, 1635,    0, 1635, 1635, 1543,  113,   84,   79,
       96,  101,  122,   71, 1566, 1561,   99, 1554,  122,  134,
      137,  102,  140,  142,  156,  145,  126, 1563,  162,  106,
     1635, 1540, 1635,  170, 1635, 1616, 1635, 1635,  210, 1635,
     1615,    0, 1635, 1613, 1635, 1635, 1635, 1635, 1609, 1612,
     1580,    0, 1635,  223,  216, 1610, 1609,  203, 1635, 1635,

     1635, 1635, 1635,  251,  208,  282,  274,  274, 1578, 1635,
     1576, 1635, 1574,    0, 1635,  192, 1550, 1549, 1548,   60,
     1543, 1536, 1533, 1544, 1539, 1533, 1524, 1541, 1526, 1524,
     1535, 1535, 1522, 1527, 1523, 1523,  197, 1518, 1528, 1516,
     1529, 1527, 1514, 1516, 1515, 1521, 1513,  265, 1517, 1508,
     1522, 1520, 1519, 1517, 1516, 1505, 1511, 1502,  183,    0,
     1497, 1498, 1499, 1495, 1503, 1499, 1497,  284, 1496, 1495,
     1490, 1505, 1490, 1497, 1502, 1497, 1484, 1484,   90, 1486,
      228, 1480, 1492, 1487, 1492,  221, 1493, 1484, 1475, 1474,
     1475, 1472, 1635, 1635, 1635, 1538,  333, 1537,    0, 1535,

     1635, 1635, 1635,  343,  330,  294,  370, 1486, 1485, 1533,
        0, 1532,    0,  226,  388,  402, 1635, 1635, 1635, 1478,
     1461, 1472, 1466,  226, 1473, 1460, 1461,  313,  248,  254,
     1461, 1470, 1471,    0, 1462, 1455, 1460, 1459, 1462, 1454,
     1447, 1458, 1445,  270, 1453, 1460, 1455, 1454,  377, 1444,
      231, 1454,  183, 1448, 1440,  316, 1435, 1433, 1432, 1432,
     1445, 1435, 1441,  258, 1446, 1429, 1436, 1424, 1439, 1437,
     1423,    0, 1432, 1430, 1422, 1436, 1418, 1430, 1421,  303,
     1418, 1420,    0, 1426, 1425, 1414, 1413, 1426, 1414, 1403,
     1410, 1411, 1419, 1406, 1404, 1407, 1407, 1412, 1402,  413,

     1406,    0, 1397, 1394, 1393, 1407, 1399, 1397, 1403,    0,
     1390,    0,  417,  449, 1407, 1406,    0,    0,  285,  481,
     1399, 1388, 1393, 1389, 1399, 1398,  332, 1397, 1392, 1393,
     1372, 1389, 1379, 1385, 1372, 1375, 1384, 1383, 1372, 1362,
     1378, 1371, 1369, 1376,  272,    0,    0, 1372, 1362, 1359,
     1377, 1370, 1374,    0,    0,  387, 1355, 1369, 1358, 1355,
     1355, 1369, 1350, 1363, 1346,    0, 1347, 1348, 1363, 1338,
     1348, 1352, 1340, 1350, 1339, 1338, 1355, 1348,    0, 1349,
     1344, 1351, 1339, 1335, 1329, 1336,    0, 1343,    0, 1331,
     1339, 1324, 1330,    0, 1338, 1332,  383, 1335, 1321, 1319,

     1336, 1335, 1317, 1316, 1319, 1331, 1328, 1325, 1317,  316,
     1314, 1315, 1321,    0,    0, 1316,    0,    0, 1310, 1306,
     1317, 1314, 1315, 1304,    0,    0,  381, 1313,    0,    0,
     1305, 1311, 1301, 1310, 1293, 1288, 1300, 1305, 1292, 1294,
     1635, 1304, 1290, 1292, 1301, 1290, 1297, 1280, 1281, 1281,
     1284, 1279, 1282, 1294,    0,  423,    0,    0, 1287, 1284,
     1280, 1274, 1276, 1277, 1270, 1273, 1272, 1271, 1280, 1274,
     1277,  387,    0,    0, 1276, 1271, 1278, 1261,  429, 1272,
     1259, 1271, 1273,    0,    0, 1259, 1267,    0, 1253, 1253,
     1253, 1255, 1254, 1261, 1258, 1242,  438, 1244, 1257, 1254,

     1241,    0,    0, 1244, 1242, 1239,    0, 1247, 1237, 1235,
        0,    0, 1244, 1235, 1250, 1246,    0, 1243, 1247, 1240,
     1222,    0, 1239, 1240,    0, 1236, 1228,    0, 1224,    0,
        0,    0, 1235, 1216, 1239, 1232, 1224, 1236, 1229, 1221,
     1217, 1227, 1225, 1228, 1213, 1212, 1225, 1222, 1219, 1222,
     1219, 1207,    0,    0, 1201,    0,    0,    0, 1212, 1199,
     1216,    0, 1211, 1210, 1208, 1210, 1207, 1191, 1197, 1206,
     1196, 1196, 1189, 1190, 1185,    0,    0,    0,    0,    0,
     1198, 1190, 1198, 1183, 1180, 1174, 1196, 1181,    0,    0,
     1190, 1191,    0,    0,    0, 1174, 1187, 1182, 1168,    0,

     1170, 1175, 1182,    0, 1180, 1180, 1170,    0, 1159, 1165,
      440,  444,  463,    0,    0, 1176, 1175, 1162, 1162, 1166,
     1170, 1156, 1161, 1149, 1160, 1152, 1171, 1157, 1154, 1146,
     1152,    0, 1146, 1165, 1151, 1161, 1156, 1151, 1145,    0,
     1145,    0,    0, 1148, 1137, 1137, 1140, 1142, 1138, 1140,
        0,    0, 1130, 1125,    0,    0, 1121,    0,    0,    0,
     1107, 1119,    0, 1117, 1112,    0, 1094, 1091, 1080, 1097,
        0,  465, 1096, 1096,    0, 1097,    0,    0,    0,    0,
        0,    0, 1093, 1085, 1087, 1086, 1081, 1074, 1083, 1063,
     1055, 1072, 1070, 1029, 1044, 1039, 1035, 1025,    0, 1031,

      320, 1022, 1021, 1024, 1022,    0,    0, 1017, 1007, 1012,
     1007,  912,  924,    0,    0,    0,    0,  928,  908,  913,
      909,  920,    0,  912,    0,    0,    0,    0,  918,  909,
        0,    0,  902,  906,  895,  904,  425,  913,  901,  910,
      911,  908,  895,  912,  900,  893,  893,  895,  890, 1635,
      889,  863,    0,    0,   32,   75,    0,  142,  184,  230,
      257,  291,    0,    0,  311,  310,    0,  349,  363,  372,
      394,  399,  410,  410,  430,  419,  431,  419,  438,  442,
      424,  452,  443, 1635,  428,  441,  511,  457,  449,  459,
      444,    0,    0,  462,  463,  470,  458, 1635,  472,  457,

     1635,  470,  455,  466,  477,  473,  469,  474,  462,  463,
      478,  483,  480,  467,  482,  474,  539,  486,    0,    0,
      486,    0,  480,  478,  489,  474,  479,  496,  479,  482,
      501,  482,  487,  498,  488,  499,  503,  499,  500,  515,
      508,  522,  577,  525,    0,  513,  514,  525,  525,  527,
      508,  509,  529,  526,  535,  523,  533, 1635,  534, 1635,
      523, 1635,  522,  537,  529,  540,  554,  543,  607,    0,
      540,  541,  542,  543,  612,  545,  560,  560,  562,    0,
      565,  551,  571,  555,  565,  555,  555,  566,  560, 1635,
      564,  565,  567,  581,  585,  572,  581,  637,  660,  571,

      585,  587,  573,  577,  648,  580,  595,  602,  583,  595,
      586,  591,  602,  591,  608,  598,  608,  609,  597,  672,
      700,  607,    0,  598,  613,  604,  688,  615,  676,  621,
      634, 1635, 1635, 1635,  633,  639,  641,  650,  639,  640,
     1635,  709,    0,  642,  643,  644,  645, 1635,  646,  644,
      661,  653,  661,  708,  667,  731,  663,  674,  666,  680,
      681,  669,  679, 1635,  684,  687,  672,  678,  719,  689,
      680,  679,  675,  702,  681,  698, 1635,  682,  684, 1635,
      683,  755,  688,    0,  703,  737,  760,  698,  710,  712,
      710,  709,  711,  725,  711,  714, 1635,  728,  784,    0,

      716,  771,  787,  733,  771,  724,  738,  738, 1635,  730,
      727, 1635, 1635,  727,  730,  796,  786,  735, 1635, 1635,
     1635,  740,  750,  763,  764, 1635, 1635,  763,  766,  761,
     1635,  798,  808,  833,  811,  849,  772,  775, 1635,  773,
     1635,  762,  778,  771,  807,  817,  806,  859,  869,  778,
     1635, 1635,  781, 1635,  824,  817,  878,  810,  884,  781,
      847, 1635, 1635, 1635,  848, 1635,  839,  916,  835,  831,
      901,  847,  858,  933,  861, 1635,  850,  853,  873,  871,
      874, 1635, 1635,  984,  997, 1010, 1023, 1036, 1049, 1059,
     1067, 1076, 1086, 1099, 1112, 1124, 1135, 1146, 1152, 1159,

     1166, 1179, 1187, 1194
    } ;

static yyconst flex_int16_t yy_def[1105] =
    {   0,
     1083,    1, 1084, 1084, 1085, 1085, 1086, 1086, 1087, 1087,
     1088, 1088, 1089, 1089, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1090, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1091, 1092, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1093, 1083, 1083, 1083, 1083, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1094, 1083, 1095, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1090, 1083, 1083, 1096, 1097, 1098, 1083, 1083, 1083,

     1083, 1083, 1083, 1083, 1091, 1083, 1083, 1092, 1083, 1083,
     1083, 1083, 1083, 1093, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1083, 1083, 1083, 1083, 1083, 1083, 1094, 1095,

     1083, 1083, 1083, 1083, 1083, 1096, 1083, 1083, 1083, 1097,
     1099, 1098, 1100, 1101, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,

     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1083, 1083, 1083, 1083, 1099, 1100, 1101, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,

     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,

     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,

     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1102, 1083, 1083, 1083, 1083, 1083, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1102, 1083,

     1083, 1083, 1083, 1083, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1083, 1083, 1083,

     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1093, 1093, 1093, 1093, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,  843,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1093, 1093, 1093,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,

     1093, 1093, 1093, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1093, 1093, 1093, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083,  921, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1093, 1093, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1093, 1093, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1093, 1093, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1093,

     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1103, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1103, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1104, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1104, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083,    0, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,

     1083, 1083, 1083, 1083
    } ;

static yyconst flex_int16_t yy_nxt[1717] =
    {   0,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   45,   16,   46,   47,
       44,   48,   49,   50,   51,   52,   53,   54,   55,   56,
       57,   58,   44,   59,   60,   61,   62,   63,   64,   65,
       66,   67,   68,   69,   70,   44,   44,   71,   72,   73,
       74,   76,   77,   76,   77,   77,   81,   77,   81,   77,
       83,   77,   83,   77,   87,   77,   87,   88,  789,   88,

      100,  101,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   94,   95,  104,  225,   96,   97,   98,  107,
      109,  110,  112,  113,  226,  131,  104,  143,   94,   89,
       95,   89,  144,  296,   96,  790,  106,  127,  133,  128,
      132,   97,  134,  129,   98,  130,  147,  137,  106,  297,
      135,  138,  136,  106,  148,  116,  117,  118,  119,  120,
      160,  191,  192,  161,  150,  106,  121,  139,  122,  194,
      123,  124,  151,  125,  126,  140,  153,  141,  152,  156,
      154,  182,  162,  157,  142,  183,  167,  179,  168,  184,

      155,  158,  791,  159,  163,  180,  164,  169,  165,  170,
      172,  166,  171,  181,  186,  173,  174,  206,  187,  115,
      175,  188,  189,  176,  204,  104,  177,  178,  190,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  368,
       94,   95,  205,  205,   96,   97,  220,  106,  195,  243,
      208,  272,  273,  274,  244,  369,   94,  205,   95,  792,
      209,  208,   96,  221,  106,  106,  245,  205,  205,   97,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      299,  305,  106,  325,  107,  364,  306,  365,  300,  326,
      209,  104,  208,  366,  793,  206,  215,  205,  215,  205,

      334,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,   94,   95,  106,  335,   96,   97,   98,  336,  256,
      794,  381,  350,  337,  106,  257,  382,   94,  208,   95,
      106,  258,  259,   96,  260,  261,  282,  351,  209,  208,
       97,  106,  283,   98,  204,  795,  457,  284,  458,  313,
      313,  285,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  205,  205,  313,  330,  397,  796,  209,  331,
      208,  372,  398,  797,  313,  313,  518,  205,  748,  373,
      313,  332,  437,  519,  333,  749,  438,  205,  205,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  439,

      530,  531,  502,  503,  313,  798,  313,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  205,  799,  205,
      314,  320,  320,  320,  320,  320,  320,  320,  320,  320,
      320,  356,  417,  418,  357,  358,  313,  313,  504,  465,
      571,  359,  556,  557,  360,  800,  361,  362,  577,  578,
      801,  313,  320,  466,  505,  802,  572,  593,  594,  677,
      678,  313,  313,  679,  680,  419,  803,  313,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  804,  420,
      772,  421,  681,  682,  726,  727,  805,  806,  807,  808,
      773,  313,  809,  313,  810,  774,  811,  814,  815,  314,

      320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
      812,  816,  817,  818,  819,  820,  821,  813,  822,  823,
      824,  825,  826,  827,  828,  829,  830,  831,  832,  833,
      834,  320,  835,  836,  837,  838,  839,  840,  841,  842,
      817,  844,  845,  846,  847,  848,  849,  850,  851,  852,
      853,  858,  859,  860,  861,  862,  854,  863,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  855,  864,
      865,  866,  856,  867,  868,  877,  878,  857,  869,  879,
      880,  881,  882,  883,  884,  885,  886,  887,  888,  889,
      890,  891,  892,  893,  894,  895,  870,  870,  870,  870,

      870,  870,  870,  870,  870,  870,  896,  897,  869,  875,
      875,  875,  875,  898,  875,  900,  901,  902,  903,  904,
      905,  906,  907,  908,  909,  910,  911,  870,  912,  913,
      899,  914,  915,  916,  871,  917,  918,  919,  898,  922,
      923,  872,  873,  924,  874,  925,  875,  926,  876,  927,
      928,  929,  930,  931,  932,  899,  933,  934,  935,  936,
      937,  920,  938,  939,  871,  940,  941,  950,  951,  952,
      953,  872,  873,  920,  874,  955,  875,  956,  876,  921,
      921,  921,  921,  921,  921,  921,  921,  921,  921,  927,
      957,  921,  921,  921,  921,  921,  921,  921,  921,  921,

      921,  942,  958,  959,  960,  961,  962,  963,  954,  964,
      942,  948,  948,  948,  948,  948,  965,  966,  967,  943,
      943,  943,  943,  943,  943,  943,  943,  943,  943,  968,
      969,  970,  956,  975,  976,  977,  978,  979,  980,  981,
      982,  983,  984,  985,  986,  987,  988,  989,  990,  994,
      943,  995,  996,  997,  991,  998,  999,  944, 1000, 1001,
     1002, 1003,  992, 1004,  945,  946,  944,  947,  993,  948,
     1005,  949, 1006,  945,  946, 1007,  947, 1008,  948, 1009,
      949, 1010, 1011, 1012, 1013,  999, 1015, 1016, 1003, 1019,
     1020, 1021, 1025, 1026, 1027, 1028,  971, 1029, 1030, 1031,

     1037,  972,  973, 1034,  974, 1038, 1017, 1017, 1017, 1017,
     1017, 1017, 1017, 1017, 1017, 1017, 1032, 1033, 1039, 1040,
     1041, 1042, 1043, 1022, 1044, 1036, 1045, 1046, 1034, 1050,
     1051, 1052, 1053, 1054, 1055, 1056, 1057, 1023, 1060, 1024,
     1061, 1064, 1036, 1062, 1063, 1036, 1067, 1018, 1068, 1036,
     1036, 1014, 1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047,
     1047, 1047, 1036, 1048, 1069, 1048, 1036, 1036, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1059, 1059,
     1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1065, 1070,

     1072, 1073, 1066, 1059, 1059, 1059, 1059, 1059, 1059, 1059,
     1059, 1059, 1059, 1075, 1076, 1077, 1078, 1068, 1079, 1059,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1080, 1081, 1082,  788, 1059, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071,  787,  786,  785,  784,  783,
      782, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074,  781,  780,  779,  778,  777,  776,  775,  771,
      770,  769,  768,  767,  766,  765,  764,  763,  762,  761,
      760,  759,  758, 1074,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   78,   78,   78,

       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   92,  757,  756,   92,   92,  755,   92,   92,
       92,   92,  105,  105,  105,  754,  753,  105,  752,  105,
      108,  108,  108,  108,  751,  750,  108,  747,  108,  114,
      746,  745,  114,  114,  744,  114,  114,  114,  114,  199,

      743,  742,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  207,  741,  740,  739,  738,
      207,  207,  207,  737,  736,  207,  211,  735,  734,  733,
      732,  211,  211,  211,  211,  211,  211,  213,  731,  730,
      729,  728,  213,  725,  213,  724,  723,  213,  317,  317,
      317,  317,  317,  317,  317,  318,  722,  318,  721,  720,
      318,  318,  319,  319,  719,  718,  319,  717,  319,  699,
      699,  716,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699, 1035, 1035, 1035,  715,  714, 1035,  713, 1035,

     1058, 1058,  712,  711, 1058,  710, 1058,  709,  708,  707,
      706,  705,  704,  703,  702,  701,  700,  698,  697,  696,
      695,  694,  693,  692,  691,  690,  689,  688,  687,  686,
      685,  684,  683,  676,  675,  674,  673,  672,  671,  670,
      669,  668,  667,  666,  665,  664,  663,  662,  661,  660,
      659,  658,  657,  656,  655,  654,  653,  652,  651,  650,
      649,  648,  647,  646,  645,  644,  643,  642,  641,  640,
      639,  638,  637,  636,  635,  634,  633,  632,  631,  630,
      629,  628,  627,  626,  625,  624,  623,  622,  621,  620,
      619,  618,  617,  616,  615,  614,  613,  612,  611,  610,

      609,  608,  607,  606,  605,  604,  603,  602,  601,  600,
      599,  598,  597,  596,  595,  592,  591,  590,  589,  588,
      587,  586,  585,  584,  583,  582,  581,  580,  579,  576,
      575,  574,  573,  570,  569,  568,  567,  566,  565,  564,
      563,  562,  561,  560,  559,  558,  555,  554,  553,  552,
      551,  550,  549,  548,  547,  546,  545,  544,  543,  542,
      541,  540,  539,  538,  537,  536,  535,  534,  533,  532,
      529,  528,  527,  526,  525,  524,  523,  522,  521,  520,
      517,  516,  515,  514,  513,  512,  511,  510,  509,  508,
      507,  506,  501,  500,  499,  498,  497,  496,  495,  494,

      493,  492,  491,  490,  489,  488,  487,  486,  485,  484,
      483,  482,  481,  480,  479,  478,  477,  476,  475,  474,
      473,  472,  471,  470,  469,  468,  467,  464,  463,  462,
      461,  460,  459,  456,  455,  454,  453,  452,  451,  450,
      449,  448,  447,  446,  445,  444,  443,  442,  441,  440,
      436,  435,  434,  433,  432,  431,  316,  315,  430,  429,
      428,  427,  426,  425,  424,  423,  422,  416,  415,  414,
      413,  412,  411,  410,  409,  408,  407,  406,  405,  404,
      403,  402,  401,  400,  399,  396,  395,  394,  393,  392,
      391,  390,  389,  388,  387,  386,  385,  384,  383,  380,

      379,  378,  377,  376,  375,  374,  371,  370,  367,  363,
      355,  354,  353,  352,  349,  348,  347,  346,  345,  344,
      343,  342,  341,  340,  339,  338,  329,  328,  327,  324,
      323,  322,  321,  212,  210,  316,  315,  201,  198,  196,
      312,  311,  310,  309,  308,  307,  304,  303,  302,  301,
      298,  295,  294,  293,  292,  291,  290,  289,  288,  287,
      286,  281,  280,  279,  278,  277,  276,  275,  271,  270,
      269,  268,  267,  266,  265,  264,  263,  262,  255,  254,
      253,  252,  251,  250,  249,  248,  247,  246,  242,  241,
      240,  239,  238,  237,  236,  235,  234,  233,  232,  231,

      230,  229,  228,  227,  224,  223,  222,  219,  218,  217,
      212,  210,  203,   90,  202,  201,  198,  196,  193,  185,
      149,  146,  145,  115,  111,  103,  102,   99,   93,   91,
       90, 1083,   85,   85,   15, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,

     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083
    } ;

static yyconst flex_int16_t yy_chk[1717] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    3,    4,    4,    5,    7,    7,    8,    8,
        9,    9,   10,   10,   13,    6,   14,   13,  755,   14,

       29,   29,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,   26,   26,   35,  120,   26,   26,   26,   36,
       39,   39,   41,   41,  120,   50,   36,   54,   26,   13,
       26,   14,   54,  179,   26,  756,   35,   49,   51,   49,
       50,   26,   51,   49,   26,   49,   57,   52,   36,  179,
       51,   52,   51,   35,   57,   48,   48,   48,   48,   48,
       62,   70,   70,   62,   59,   36,   48,   53,   48,   74,
       48,   48,   59,   48,   48,   53,   60,   53,   59,   61,
       60,   67,   63,   61,   53,   67,   64,   66,   64,   67,

       60,   61,  758,   61,   63,   66,   63,   64,   63,   64,
       65,   63,   64,   66,   69,   65,   65,   95,   69,   74,
       65,   69,   69,   65,   94,  105,   65,   65,   69,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,  253,
       98,   98,   94,   94,   98,   98,  116,  105,   74,  137,
       95,  159,  159,  159,  137,  253,   98,   94,   98,  759,
       95,   95,   98,  116,  105,  214,  137,   94,   94,   98,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      181,  186,  214,  224,  108,  251,  186,  251,  181,  224,
       95,  108,   95,  251,  760,  206,  106,   94,  106,   94,

      229,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  107,  107,  108,  229,  107,  107,  107,  230,  148,
      761,  264,  244,  230,  319,  148,  264,  107,  206,  107,
      108,  148,  148,  107,  148,  148,  168,  244,  206,  206,
      107,  319,  168,  107,  204,  762,  345,  168,  345,  205,
      205,  168,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  204,  204,  205,  228,  280,  765,  206,  228,
      206,  256,  280,  766,  205,  205,  410,  204,  701,  256,
      205,  228,  327,  410,  228,  701,  327,  204,  204,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  327,

      427,  427,  397,  397,  205,  768,  205,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  204,  769,  204,
      207,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  249,  300,  300,  249,  249,  313,  313,  397,  356,
      472,  249,  456,  456,  249,  770,  249,  249,  479,  479,
      771,  313,  216,  356,  397,  772,  472,  497,  497,  611,
      611,  313,  313,  612,  612,  300,  773,  313,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  774,  300,
      737,  300,  613,  613,  672,  672,  775,  776,  777,  778,
      737,  313,  779,  313,  780,  737,  781,  783,  785,  314,

      320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
      782,  786,  787,  788,  789,  790,  791,  782,  794,  795,
      796,  797,  799,  800,  802,  803,  804,  805,  806,  807,
      808,  320,  809,  810,  811,  812,  813,  814,  815,  816,
      817,  818,  821,  823,  824,  825,  826,  827,  828,  829,
      830,  832,  833,  834,  835,  836,  831,  837,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  831,  838,
      839,  840,  831,  841,  842,  844,  846,  831,  843,  847,
      848,  849,  850,  851,  852,  853,  854,  855,  856,  857,
      859,  861,  863,  864,  865,  866,  843,  843,  843,  843,

      843,  843,  843,  843,  843,  843,  867,  868,  869,  871,
      872,  873,  874,  875,  876,  877,  878,  879,  879,  881,
      882,  883,  884,  885,  886,  887,  888,  843,  889,  891,
      875,  892,  893,  894,  843,  895,  896,  897,  898,  900,
      901,  843,  843,  902,  843,  903,  843,  904,  843,  905,
      906,  907,  908,  909,  910,  898,  911,  912,  913,  914,
      915,  899,  916,  917,  869,  918,  919,  922,  924,  925,
      926,  869,  869,  920,  869,  928,  869,  929,  869,  899,
      899,  899,  899,  899,  899,  899,  899,  899,  899,  927,
      930,  920,  920,  920,  920,  920,  920,  920,  920,  920,

      920,  921,  931,  935,  936,  937,  938,  939,  927,  940,
      942,  944,  945,  946,  947,  949,  950,  951,  952,  921,
      921,  921,  921,  921,  921,  921,  921,  921,  921,  953,
      954,  955,  956,  957,  958,  959,  960,  961,  962,  963,
      965,  966,  967,  968,  969,  970,  971,  972,  973,  975,
      921,  976,  978,  979,  974,  981,  982,  921,  983,  985,
      986,  987,  974,  988,  921,  921,  942,  921,  974,  921,
      989,  921,  990,  942,  942,  991,  942,  992,  942,  993,
      942,  994,  995,  996,  998,  999, 1001, 1002, 1003, 1004,
     1005, 1005, 1006, 1007, 1008, 1010,  956, 1011, 1014, 1015,

     1018,  956,  956, 1017,  956, 1022, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1016, 1016, 1023, 1024,
     1025, 1028, 1029, 1005, 1030, 1017, 1032, 1033, 1035, 1037,
     1038, 1040, 1042, 1043, 1044, 1045, 1046, 1005, 1050, 1005,
     1053, 1056, 1017, 1055, 1055, 1047, 1060, 1003, 1061, 1058,
     1035,  999, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1047, 1036, 1065, 1036, 1058, 1035, 1036, 1036,
     1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1048, 1048,
     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1057, 1067,

     1069, 1070, 1057, 1059, 1059, 1059, 1059, 1059, 1059, 1059,
     1059, 1059, 1059, 1072, 1073, 1075, 1077, 1068, 1078, 1049,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1079, 1080, 1081,  752, 1059, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068,  751,  749,  748,  747,  746,
      745, 1071, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074,  744,  743,  742,  741,  740,  739,  738,  736,
      735,  734,  733,  730,  729,  724,  722,  721,  720,  719,
      718,  713,  712, 1074, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1085, 1085, 1085,

     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
     1086, 1086, 1086, 1087, 1087, 1087, 1087, 1087, 1087, 1087,
     1087, 1087, 1087, 1087, 1087, 1087, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1089,
     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089,
     1089, 1089, 1090,  711,  710, 1090, 1090,  709, 1090, 1090,
     1090, 1090, 1091, 1091, 1091,  708,  705, 1091,  704, 1091,
     1092, 1092, 1092, 1092,  703,  702, 1092,  700, 1092, 1093,
      698,  697, 1093, 1093,  696, 1093, 1093, 1093, 1093, 1094,

      695,  694, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1096,  693,  692,  691,  690,
     1096, 1096, 1096,  689,  688, 1096, 1097,  687,  686,  685,
      684, 1097, 1097, 1097, 1097, 1097, 1097, 1098,  683,  676,
      674,  673, 1098,  670, 1098,  669,  668, 1098, 1099, 1099,
     1099, 1099, 1099, 1099, 1099, 1100,  667, 1100,  665,  664,
     1100, 1100, 1101, 1101,  662,  661, 1101,  657, 1101, 1102,
     1102,  654, 1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102,
     1102, 1102, 1103, 1103, 1103,  653,  650, 1103,  649, 1103,

     1104, 1104,  648,  647, 1104,  646, 1104,  645,  644,  641,
      639,  638,  637,  636,  635,  634,  633,  631,  630,  629,
      628,  627,  626,  625,  624,  623,  622,  621,  620,  619,
      618,  617,  616,  610,  609,  607,  606,  605,  603,  602,
      601,  599,  598,  597,  596,  592,  591,  588,  587,  586,
      585,  584,  583,  582,  581,  575,  574,  573,  572,  571,
      570,  569,  568,  567,  566,  565,  564,  563,  561,  560,
      559,  555,  552,  551,  550,  549,  548,  547,  546,  545,
      544,  543,  542,  541,  540,  539,  538,  537,  536,  535,
      534,  533,  529,  527,  526,  524,  523,  521,  520,  519,

      518,  516,  515,  514,  513,  510,  509,  508,  506,  505,
      504,  501,  500,  499,  498,  496,  495,  494,  493,  492,
      491,  490,  489,  487,  486,  483,  482,  481,  480,  478,
      477,  476,  475,  471,  470,  469,  468,  467,  466,  465,
      464,  463,  462,  461,  460,  459,  454,  453,  452,  451,
      450,  449,  448,  447,  446,  445,  444,  443,  442,  440,
      439,  438,  437,  436,  435,  434,  433,  432,  431,  428,
      424,  423,  422,  421,  420,  419,  416,  413,  412,  411,
      409,  408,  407,  406,  405,  404,  403,  402,  401,  400,
      399,  398,  396,  395,  393,  392,  391,  390,  388,  386,

      385,  384,  383,  382,  381,  380,  378,  377,  376,  375,
      374,  373,  372,  371,  370,  369,  368,  367,  365,  364,
      363,  362,  361,  360,  359,  358,  357,  353,  352,  351,
      350,  349,  348,  344,  343,  342,  341,  340,  339,  338,
      337,  336,  335,  334,  333,  332,  331,  330,  329,  328,
      326,  325,  324,  323,  322,  321,  316,  315,  311,  309,
      308,  307,  306,  305,  304,  303,  301,  299,  298,  297,
      296,  295,  294,  293,  292,  291,  290,  289,  288,  287,
      286,  285,  284,  282,  281,  279,  278,  277,  276,  275,
      274,  273,  271,  270,  269,  268,  267,  266,  265,  263,

      262,  261,  260,  259,  258,  257,  255,  254,  252,  250,
      248,  247,  246,  245,  243,  242,  241,  240,  239,  238,
      237,  236,  235,  233,  232,  231,  227,  226,  225,  223,
      222,  221,  220,  212,  210,  209,  208,  200,  198,  196,
      192,  191,  190,  189,  188,  187,  185,  184,  183,  182,
      180,  178,  177,  176,  175,  174,  173,  172,  171,  170,
      169,  167,  166,  165,  164,  163,  162,  161,  158,  157,
      156,  155,  154,  153,  152,  151,  150,  149,  147,  146,
      145,  144,  143,  142,  141,  140,  139,  138,  136,  135,
      134,  133,  132,  131,  130,  129,  128,  127,  126,  125,

      124,  123,  122,  121,  119,  118,  117,  113,  111,  109,
       97,   96,   91,   90,   89,   84,   81,   76,   72,   68,
       58,   56,   55,   47,   40,   32,   30,   27,   25,   20,
       17,   15,   12,   11, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,

     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[246] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    1, 1, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "very.lex"
#line 2 "very.lex"
	#include<string>
	#include<iostream>
	#include<fstream>
	#include<stack>
	#include<assert.h>
	#include<regex>
	#include<vector>

	#include"veryclass.h"

	void prt_fatal(string str)  { cerr<<"FATAL : "<<str<<endl<<flush; return; }
	void prt_info (string str)  { cerr<<"INOF  : "<<str<<endl<<flush; return; }
	
	string stringssy_string;
	unsigned int ln;
/*A.8.7 Numbers */
/*A.8.8 Strings*/
/*already deal with below*/
/*A.9.2 Comments*/
/*already deal with below*/
/*A.9.3 Identifiers*/
/*A.9.4 White space*/
/*white space only used in escaped_identifier*/

#line 1223 "very.cpp"

#define INITIAL 0
#define line_skip_blank 1
#define line_number 2
#define line_skip_blank2 3
#define line_filename 4
#define endofline 5
#define stringssy 6

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 69 "very.lex"


#line 1337 "very.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1084 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1635 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 71 "very.lex"

	YY_BREAK
case 2:
YY_RULE_SETUP
#line 73 "very.lex"
{
	string s{yytext};
	cout<<"SYSTEM_TASK_FUNCTION_IDENTIFIER "<<s<<endl;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 78 "very.lex"
{ cout<<"KEY_ALWAYS"<<endl;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 79 "very.lex"
{ cout<<"KEY_AND"<<endl;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 80 "very.lex"
{ cout<<"KEY_ASSIGN"<<endl;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 81 "very.lex"
{ cout<<"KEY_AUTOMATIC"<<endl;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 82 "very.lex"
{ cout<<"KEY_BEGIN"<<endl;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 83 "very.lex"
{ cout<<"KEY_BUF"<<endl;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 84 "very.lex"
{ cout<<"KEY_BUFIF0"<<endl;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 85 "very.lex"
{ cout<<"KEY_BUFIF1"<<endl;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 86 "very.lex"
{ cout<<"KEY_CASE"<<endl;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 87 "very.lex"
{ cout<<"KEY_CASEX"<<endl;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 88 "very.lex"
{ cout<<"KEY_CASEZ"<<endl;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 89 "very.lex"
{ cout<<"KEY_CELL"<<endl;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 90 "very.lex"
{ cout<<"KEY_CMOS"<<endl;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 91 "very.lex"
{ cout<<"KEY_CONFIG"<<endl;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 92 "very.lex"
{ cout<<"KEY_DEASSIGN"<<endl;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 93 "very.lex"
{ cout<<"KEY_DEFAULT"<<endl;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 94 "very.lex"
{ cout<<"KEY_DEFPARAM"<<endl;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 95 "very.lex"
{ cout<<"KEY_DESIGN"<<endl;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 96 "very.lex"
{ cout<<"KEY_DISABLE"<<endl;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 97 "very.lex"
{ cout<<"KEY_EDGE"<<endl;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 98 "very.lex"
{ cout<<"KEY_ELSE"<<endl;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 99 "very.lex"
{ cout<<"KEY_END"<<endl;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 100 "very.lex"
{ cout<<"KEY_ENDCASE"<<endl;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 101 "very.lex"
{ cout<<"KEY_ENDCONFIG"<<endl;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 102 "very.lex"
{ cout<<"KEY_ENDFUNCTION"<<endl;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 103 "very.lex"
{ cout<<"KEY_ENDGENERATE"<<endl;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 104 "very.lex"
{ cout<<"KEY_ENDMODULE"<<endl;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 105 "very.lex"
{ cout<<"KEY_ENDPRIMITIVE"<<endl;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 106 "very.lex"
{ cout<<"KEY_ENDSPECIFY"<<endl;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 107 "very.lex"
{ cout<<"KEY_ENDTABLE"<<endl;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 108 "very.lex"
{ cout<<"KEY_ENDTASK"<<endl;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 109 "very.lex"
{ cout<<"KEY_EVENT"<<endl;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 110 "very.lex"
{ cout<<"KEY_FOR"<<endl;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 111 "very.lex"
{ cout<<"KEY_FORCE"<<endl;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 112 "very.lex"
{ cout<<"KEY_FOREVER"<<endl;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 113 "very.lex"
{ cout<<"KEY_FORK"<<endl;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 114 "very.lex"
{ cout<<"KEY_FUNCTION"<<endl;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 115 "very.lex"
{ cout<<"KEY_GENERATE"<<endl;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 116 "very.lex"
{ cout<<"KEY_GENVAR"<<endl;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 117 "very.lex"
{ cout<<"KEY_HIGHZ0"<<endl;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 118 "very.lex"
{ cout<<"KEY_HIGHZ1"<<endl;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 119 "very.lex"
{ cout<<"KEY_IF"<<endl;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 120 "very.lex"
{ cout<<"KEY_IFNONE"<<endl;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 121 "very.lex"
{ cout<<"KEY_INCDIR"<<endl;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 122 "very.lex"
{ cout<<"KEY_INCLUDE"<<endl;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 123 "very.lex"
{ cout<<"KEY_INITIAL"<<endl;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 124 "very.lex"
{ cout<<"KEY_INOUT"<<endl;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 125 "very.lex"
{ cout<<"KEY_INPUT"<<endl;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 126 "very.lex"
{ cout<<"KEY_INSTANCE"<<endl;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 127 "very.lex"
{ cout<<"KEY_INTEGER"<<endl;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 128 "very.lex"
{ cout<<"KEY_JOIN"<<endl;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 129 "very.lex"
{ cout<<"KEY_LARGE"<<endl;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 130 "very.lex"
{ cout<<"KEY_LIBLIST"<<endl;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 131 "very.lex"
{ cout<<"KEY_LIBRARY"<<endl;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 132 "very.lex"
{ cout<<"KEY_LOCALPARAM"<<endl;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 133 "very.lex"
{ cout<<"KEY_MACROMODULE"<<endl;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 134 "very.lex"
{ cout<<"KEY_MEDIUM"<<endl;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 135 "very.lex"
{ cout<<"KEY_MODULE"<<endl;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 136 "very.lex"
{ cout<<"KEY_NAND"<<endl;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 137 "very.lex"
{ cout<<"KEY_NEGEDGE"<<endl;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 138 "very.lex"
{ cout<<"KEY_NMOS"<<endl;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 139 "very.lex"
{ cout<<"KEY_NOR"<<endl;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 140 "very.lex"
{ cout<<"KEY_NOSHOWCANCELLED"<<endl;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 141 "very.lex"
{ cout<<"KEY_NOT"<<endl;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 142 "very.lex"
{ cout<<"KEY_NOTIF0"<<endl;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 143 "very.lex"
{ cout<<"KEY_NOTIF1"<<endl;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 144 "very.lex"
{ cout<<"KEY_OR"<<endl;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 145 "very.lex"
{ cout<<"KEY_OUTPUT"<<endl;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 146 "very.lex"
{ cout<<"KEY_PARAMETER"<<endl;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 147 "very.lex"
{ cout<<"KEY_PMOS"<<endl;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 148 "very.lex"
{ cout<<"KEY_POSEDGE"<<endl;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 149 "very.lex"
{ cout<<"KEY_PRIMITIVE"<<endl;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 150 "very.lex"
{ cout<<"KEY_PULL0"<<endl;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 151 "very.lex"
{ cout<<"KEY_PULL1"<<endl;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 152 "very.lex"
{ cout<<"KEY_PULLDOWN"<<endl;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 153 "very.lex"
{ cout<<"KEY_PULLUP"<<endl;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 154 "very.lex"
{ cout<<"KEY_PULSESTYLE_ONEVENT"<<endl;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 155 "very.lex"
{ cout<<"KEY_PULSESTYLE_ONDETECT"<<endl;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 156 "very.lex"
{ cout<<"KEY_RCMOS"<<endl;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 157 "very.lex"
{ cout<<"KEY_REAL"<<endl;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 158 "very.lex"
{ cout<<"KEY_REALTIME"<<endl;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 159 "very.lex"
{ cout<<"KEY_REG"<<endl;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 160 "very.lex"
{ cout<<"KEY_RELEASE"<<endl;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 161 "very.lex"
{ cout<<"KEY_REPEAT"<<endl;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 162 "very.lex"
{ cout<<"KEY_RNMOS"<<endl;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 163 "very.lex"
{ cout<<"KEY_RPMOS"<<endl;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 164 "very.lex"
{ cout<<"KEY_RTRAN"<<endl;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 165 "very.lex"
{ cout<<"KEY_RTRANIF0"<<endl;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 166 "very.lex"
{ cout<<"KEY_RTRANIF1"<<endl;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 167 "very.lex"
{ cout<<"KEY_SCALARED"<<endl;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 168 "very.lex"
{ cout<<"KEY_SHOWCANCELLED"<<endl;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 169 "very.lex"
{ cout<<"KEY_SIGNED"<<endl;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 170 "very.lex"
{ cout<<"KEY_SMALL"<<endl;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 171 "very.lex"
{ cout<<"KEY_SPECIFY"<<endl;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 172 "very.lex"
{ cout<<"KEY_SPECPARAM"<<endl;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 173 "very.lex"
{ cout<<"KEY_STRONG0"<<endl;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 174 "very.lex"
{ cout<<"KEY_STRONG1"<<endl;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 175 "very.lex"
{ cout<<"KEY_SUPPLY0"<<endl;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 176 "very.lex"
{ cout<<"KEY_SUPPLY1"<<endl;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 177 "very.lex"
{ cout<<"KEY_TABLE"<<endl;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 178 "very.lex"
{ cout<<"KEY_TASK"<<endl;}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 179 "very.lex"
{ cout<<"KEY_TIME"<<endl;}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 180 "very.lex"
{ cout<<"KEY_TRAN"<<endl;}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 181 "very.lex"
{ cout<<"KEY_TRANIF0"<<endl;}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 182 "very.lex"
{ cout<<"KEY_TRANIF1"<<endl;}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 183 "very.lex"
{ cout<<"KEY_TRI"<<endl;}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 184 "very.lex"
{ cout<<"KEY_TRI0"<<endl;}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 185 "very.lex"
{ cout<<"KEY_TRI1"<<endl;}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 186 "very.lex"
{ cout<<"KEY_TRIAND"<<endl;}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 187 "very.lex"
{ cout<<"KEY_TRIOR"<<endl;}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 188 "very.lex"
{ cout<<"KEY_TRIREG"<<endl;}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 189 "very.lex"
{ cout<<"KEY_UNSIGNED"<<endl;}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 190 "very.lex"
{ cout<<"KEY_USE"<<endl;}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 191 "very.lex"
{ cout<<"KEY_UWIRE"<<endl;}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 192 "very.lex"
{ cout<<"KEY_VECTORED"<<endl;}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 193 "very.lex"
{ cout<<"KEY_WAIT"<<endl;}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 194 "very.lex"
{ cout<<"KEY_WAND"<<endl;}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 195 "very.lex"
{ cout<<"KEY_WEAK0"<<endl;}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 196 "very.lex"
{ cout<<"KEY_WEAK1"<<endl;}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 197 "very.lex"
{ cout<<"KEY_WHILE"<<endl;}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 198 "very.lex"
{ cout<<"KEY_WIRE"<<endl;}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 199 "very.lex"
{ cout<<"KEY_WOR"<<endl;}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 200 "very.lex"
{ cout<<"KEY_XNOR"<<endl;}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 201 "very.lex"
{ cout<<"KEY_XOR"<<endl;}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 202 "very.lex"
{ cout<<"SIMPLE_IDENTIFIER "<<yytext<<endl;}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 204 "very.lex"
{
	unsigned int lxm_no_;
	sscanf(yytext,"%d",&lxm_no_);
	cout<<"UNSIGNED_NUMBER "<<lxm_no_<<endl;
}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 211 "very.lex"
{
	cout<<"UNSIGNED_NUMBER_size "<<yytext<<endl;
}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 216 "very.lex"
{
	assert(false);
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 220 "very.lex"
{
	assert(false);
}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 224 "very.lex"
{
	cout<<"OCTAL_NUMBER "<<yytext<<endl;
}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 228 "very.lex"
{
	cout<<"BINARY_NUMBER "<<yytext<<endl;
}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 233 "very.lex"
{
	cout<<"HEX_NUMBER "<<yytext<<endl;
}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 238 "very.lex"
{
	cout<<"REAL_NUMBER "<<yytext<<endl;
}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 243 "very.lex"
{string s{yytext};cout<<"OP2_ADD "<<s<<endl;}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 244 "very.lex"
{string s{yytext};cout<<"OP2_SUB "<<s<<endl;}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 245 "very.lex"
{string s{yytext};cout<<"OP2_AND "<<s<<endl;}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 246 "very.lex"
{string s{yytext};cout<<"OP2_OR  "<<s<<endl;}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 247 "very.lex"
{string s{yytext};cout<<"OP2_XOR "<<s<<endl;}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 248 "very.lex"
{string s{yytext};cout<<"OP2_XNOR "<<s<<endl;}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 249 "very.lex"
{string s{yytext};cout<<"OP1_LOGIC_NEG "<<s<<endl;}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 250 "very.lex"
{string s{yytext};cout<<"OP1_BITWISE_NEG "<<s<<endl;}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 251 "very.lex"
{string s{yytext};cout<<"OP1_REDUCE_NAND "<<s<<endl;}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 252 "very.lex"
{string s{yytext};cout<<"OP1_REDUCE_NOR "<<s<<endl;}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 253 "very.lex"
{string s{yytext};cout<<"OP2_MULTIPLE "<<s<<endl;}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 254 "very.lex"
{string s{yytext};cout<<"OP2_DIV "<<s<<endl;}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 255 "very.lex"
{string s{yytext};cout<<"OP2_MOD "<<s<<endl;}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 256 "very.lex"
{string s{yytext};cout<<"OP2_EQU2 "<<s<<endl;}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 257 "very.lex"
{string s{yytext};cout<<"OP2_NEQ2 "<<s<<endl;}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 258 "very.lex"
{string s{yytext};cout<<"OP2_EQU3 "<<s<<endl;}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 259 "very.lex"
{string s{yytext};cout<<"OP2_NEQ3 "<<s<<endl;}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 260 "very.lex"
{string s{yytext};cout<<"OP2_AND2 "<<s<<endl;}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 261 "very.lex"
{string s{yytext};cout<<"OP2_OR2 "<<s<<endl;}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 262 "very.lex"
{string s{yytext};cout<<"OP2_POWER "<<s<<endl;}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 263 "very.lex"
{string s{yytext};cout<<"OP2_LT "<<s<<endl;}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 264 "very.lex"
{string s{yytext};cout<<"OP2_LE "<<s<<endl;}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 265 "very.lex"
{string s{yytext};cout<<"OP2_GT "<<s<<endl;}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 266 "very.lex"
{string s{yytext};cout<<"OP2_GE "<<s<<endl;}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 267 "very.lex"
{string s{yytext};cout<<"OP2_LOGICAL_RIGHTSHIFT "<<s<<endl;}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 268 "very.lex"
{string s{yytext};cout<<"OP2_LOGICAL_LEFTSHIFT "<<s<<endl;}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 269 "very.lex"
{string s{yytext};cout<<"OP2_ARITHMETIC_RIGHTSHIFT "<<s<<endl;}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 270 "very.lex"
{string s{yytext};cout<<"OP2_ARITHMETIC_LEFTSHIFT "<<s<<endl;}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 271 "very.lex"
{string s{yytext};cout<<"OP2_QUESTION "<<s<<endl;}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 272 "very.lex"
{string s{yytext};cout<<"LPARENT "<<s<<endl;}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 273 "very.lex"
{string s{yytext};cout<<"LPARENTSTART "<<s<<endl;}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 274 "very.lex"
{string s{yytext};cout<<"RPARENT "<<s<<endl;}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 275 "very.lex"
{string s{yytext};cout<<"RPARENTSTART "<<s<<endl;}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 276 "very.lex"
{string s{yytext};cout<<"COMMA "<<s<<endl;}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 277 "very.lex"
{string s{yytext};cout<<"SEMICOLON "<<s<<endl;}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 278 "very.lex"
{string s{yytext};cout<<"COLON "<<s<<endl;}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 279 "very.lex"
{string s{yytext};cout<<"LSQUARE "<<s<<endl;}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 280 "very.lex"
{string s{yytext};cout<<"RSQUARE "<<s<<endl;}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 281 "very.lex"
{string s{yytext};cout<<"EQU1 "<<s<<endl;}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 282 "very.lex"
{string s{yytext};cout<<"LBRACE "<<s<<endl;}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 283 "very.lex"
{string s{yytext};cout<<"RBRACE "<<s<<endl;}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 284 "very.lex"
{string s{yytext};cout<<"PERIOD "<<s<<endl;}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 285 "very.lex"
{string s{yytext};cout<<"AT "<<s<<endl;}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 286 "very.lex"
{string s{yytext};cout<<"JING "<<s<<endl;}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 287 "very.lex"
{string s{yytext};cout<<"ADDRANGE "<<s<<endl;}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 288 "very.lex"
{string s{yytext};cout<<"SUBRANGE "<<s<<endl;}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 290 "very.lex"

	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 292 "very.lex"
{
	incLineNumber();
}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 297 "very.lex"
{ 
	stringssy_string="";
	yy_push_state(stringssy);
}
	YY_BREAK
/*2005 standard directive*/
case 185:
#line 305 "very.lex"
case 186:
#line 306 "very.lex"
case 187:
#line 307 "very.lex"
case 188:
#line 308 "very.lex"
case 189:
#line 309 "very.lex"
case 190:
#line 310 "very.lex"
case 191:
#line 311 "very.lex"
case 192:
#line 312 "very.lex"
case 193:
#line 313 "very.lex"
case 194:
#line 314 "very.lex"
case 195:
#line 315 "very.lex"
case 196:
#line 316 "very.lex"
case 197:
#line 317 "very.lex"
case 198:
#line 318 "very.lex"
case 199:
#line 319 "very.lex"
case 200:
#line 320 "very.lex"
case 201:
#line 321 "very.lex"
case 202:
#line 322 "very.lex"
case 203:
#line 323 "very.lex"
case 204:
#line 324 "very.lex"
case 205:
#line 325 "very.lex"
case 206:
#line 326 "very.lex"
case 207:
#line 327 "very.lex"
case 208:
#line 328 "very.lex"
case 209:
#line 329 "very.lex"
case 210:
#line 330 "very.lex"
case 211:
#line 331 "very.lex"
case 212:
#line 332 "very.lex"
case 213:
#line 333 "very.lex"
case 214:
#line 334 "very.lex"
case 215:
#line 335 "very.lex"
case 216:
YY_RULE_SETUP
#line 335 "very.lex"
{
	string s{yytext};
	prt_info("ignoring directive "+s);
}
	YY_BREAK
case 217:
#line 341 "very.lex"
case 218:
#line 342 "very.lex"
case 219:
#line 343 "very.lex"
case 220:
#line 344 "very.lex"
case 221:
#line 345 "very.lex"
case 222:
#line 346 "very.lex"
case 223:
#line 347 "very.lex"
case 224:
#line 348 "very.lex"
case 225:
#line 349 "very.lex"
case 226:
#line 350 "very.lex"
case 227:
#line 351 "very.lex"
case 228:
#line 352 "very.lex"
case 229:
YY_RULE_SETUP
#line 352 "very.lex"
{
	string s{yytext};
	prt_info("deprecated directive "+s);
}
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 357 "very.lex"
{
	ECHO;
	yy_push_state(line_skip_blank);
}
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 362 "very.lex"
{
	string s{yytext};
	prt_fatal("improper syntax "+s);
	print_pos();
	exit(1);
}
	YY_BREAK

case 232:
YY_RULE_SETUP
#line 371 "very.lex"
{
		ECHO;
		yy_pop_state();
		yy_push_state(line_number);
	}
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 376 "very.lex"
{
		string s{yytext};
		prt_fatal("improper `line statement"+s);
		print_pos();
		exit(1);
	}
	YY_BREAK


case 234:
YY_RULE_SETUP
#line 385 "very.lex"
{
		sscanf(yytext,"%d",&ln);
		ECHO;
		yy_pop_state();
		yy_push_state(line_skip_blank2);
	}
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 392 "very.lex"
{
		string s{yytext};
		prt_fatal("improper `line number"+s);
		print_pos();
		exit(1);
	}
	YY_BREAK


case 236:
YY_RULE_SETUP
#line 401 "very.lex"
{
		ECHO;
		yy_pop_state();
		yy_push_state(line_filename);
	}
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 406 "very.lex"
{
		string s{yytext};
		prt_fatal("improper `line file name"+s);
		print_pos();
		exit(1);
	}
	YY_BREAK


case 238:
YY_RULE_SETUP
#line 415 "very.lex"
{
		string s{yytext};
		setPosition(ln-1,s);
		ECHO;
		yy_pop_state();
		yy_push_state(endofline);
	}
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 423 "very.lex"
{
		string s{yytext};
		prt_fatal("improper `line file name 2"+s);
		print_pos();
		exit(1);
	}
	YY_BREAK


case 240:
/* rule 240 can match eol */
YY_RULE_SETUP
#line 433 "very.lex"
{
		incLineNumber();
		ECHO;
		yy_pop_state();
	}
	YY_BREAK


case 241:
/* rule 241 can match eol */
YY_RULE_SETUP
#line 441 "very.lex"
{
		prt_fatal("incomplet string"+stringssy_string);
		print_pos();
		exit(1);
	}
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 446 "very.lex"
{
		string s{yytext};
		stringssy_string = stringssy_string+s;
	}
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 450 "very.lex"
{
		cout<<"STRING " << stringssy_string<<endl;
		yy_pop_state();
	} 
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 454 "very.lex"
{
		string s{yytext};
		stringssy_string = stringssy_string+s;
	}
	YY_BREAK

case 245:
YY_RULE_SETUP
#line 459 "very.lex"
ECHO;
	YY_BREAK
#line 2638 "very.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(line_skip_blank):
case YY_STATE_EOF(line_number):
case YY_STATE_EOF(line_skip_blank2):
case YY_STATE_EOF(line_filename):
case YY_STATE_EOF(endofline):
case YY_STATE_EOF(stringssy):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	veryfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	veryfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					veryrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) veryrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1084 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1084 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1083);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) veryalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) veryalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		veryfree((void *) b->yy_ch_buf  );

	veryfree((void *) b  );
}

extern "C" int isatty (int );

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)veryalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)veryrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) veryalloc(new_size  );

		else
			(yy_start_stack) = (int *) veryrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *veryalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *veryrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void veryfree (void * ptr )
{
	free( (char *) ptr );	/* see veryrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 459 "very.lex"






